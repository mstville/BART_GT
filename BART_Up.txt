
#######################################################################
# R function: This function fits a BART model to group testing data 
#              
# Input:
# Z = A matrix of testing responses whose jth row is of the form (col1=Z_j, col2=cj, col3=assay used, col4:col(4+cj-1)=indices of the individuals assigned to the jth pool) 
# Y = matrix whose ith row is of the form (col1=0, col2=number of pools ith individual involved in, col3:col(3+col2-1)=pools ith individual was assigned to)
# train = dataset for training
# test = testing dataset
# GI = The number of Gibbs iterates 
# na = Number of different assays being used
# ase(bse) = prior parameters for the testing sensitivities, if these values are to be estimated, note these should be of length na (Assuming a beta prior)
# asp(bsp) = prior parameters for the testing specificities, if these values are to be estimated, note these should be of length na (Assuming a beta prior)
# Se = vector of sensitivity values, if known
# Sp = vector of specificity values, if known
# m = number of regression trees
# est.error = logical if FALSE function uses the known Se and Sp to fit model, if TRUE Se and Sp are estimated along with the other parameters

BART.gt<-function(Z, Y, train, test, GI, na, ase=rep(1,na), bse=rep(1,na), asp=rep(1,na), bsp=rep(1,na), Se=NULL, Sp=NULL, m, est.error=FALSE, print=FALSE){
  
  J<-dim(Z)[1]
  N<-dim(train)[1]
  N.te<-dim(test)[1]
  Q<-dim(as.matrix(train[,-1]))[2]
  
  varmat<-matrix(-99,nrow=GI,ncol=Q)
  gmat<-matrix(-99,nrow=GI,ncol=N)
  gmat.te<-matrix(-99,nrow=GI,ncol=N.te)
  pmat<-matrix(-99,nrow=GI,ncol=N)
  pmat.te<-matrix(-99,nrow=GI,ncol=N.te)
  ymat<-matrix(-99,nrow=GI,ncol=N)
  
  if(est.error==TRUE){
    Se.mat<-matrix(-99,nrow=GI,ncol=na)
    Sp.mat<-matrix(-99,nrow=GI,ncol=na)
  }
  
  #########################
  # Load C++ code
  Rcpp::sourceCpp("SampLatent.cpp")
  Rcpp::sourceCpp("ErrUp.cpp")
  
  
  #########################
  # Initialize latent variables
  W<-train$W
  
  #########################
  # We only need to draw one sample at a time, so create a control object
  control <- dbartsControl(updateState = FALSE, verbose = FALSE, n.burn = 0L, n.samples = 1L, n.thin = 1L, n.chains = 1L,n.trees = m)
  
  #########################
  # Create the sampler with the latent variables being the continuous response variable
  sampler=dbarts(W~.,data=train,test=test,control=control)
  sampler$data@sigma=1
  sampler$sampleTreesFromPrior()
  sampler$sampleNodeParametersFromPrior()
  sampler$setSigma(1)
  
  
  ##########################
  #GIBBS SAMPLER STARTS HERE
  
  for(g in 1:GI){
    ##########################
    # Draw a single sample from the posterior 
    draw<-sampler$run()
    
    # Recover the regression sum of trees & probs
    gx.tr<-draw$train
    gx.te<-draw$test
    
    p.tr<-pnorm(gx.tr)
    p.te<-pnorm(gx.te)
    
    # Recover variable freq counts
    count<-draw$varcount
    
    # store
    gmat[g,]<-gx.tr
    gmat.te[g,]<-gx.te
    
    pmat[g,]<-p.tr
    pmat.te[g,]<-p.te
    
    varmat[g,]<-count
    
    ##########################
    # Sample latent variables 
    # from truncated normal 
    # distribution
    Yl<-Y[,1]
    l=rep(-99,N)
    u=rep(-99,N)
    l[Yl==1]=0
    l[Yl==0]= -Inf
    u[Yl==1]= Inf
    u[Yl==0]=0
    W=rtnorm(N,(gx.tr),1,lower=l,upper=u)
    
    sampler$setResponse(W)
    
    sampler$setSigma(1)
    
    if(est.error==TRUE){
      ###################
      #Sampling Se and Sp
      
      PS<-matrix(0,nrow=na,ncol=4)
      
      res = errorupdate(N, J, Y, Z, PS, na)
      
      Se.up = matrix(res[,1:2], nrow = na, ncol = 2)
      Sp.up = matrix(res[,3:4], nrow = na, ncol = 2)
      
      for(t in 1:na){
        Se.mat[g,t]<-rbeta(1,ase[t]+Se.up[t,1],bse[t]+Se.up[t,2])
        Sp.mat[g,t]<-rbeta(1,asp[t]+Sp.up[t,1],bsp[t]+Sp.up[t,2])
      }
      Se<-Se.mat[g,]
      Sp<-Sp.mat[g,]
    }
    
    
    
    ##############################################
    # Sample true status 
    u = runif(N)
    p<-p.tr
    
    Y[,1] = SampLatent(N, p, Y=Y, Z=Z, U=u,se=Se,sp=Sp,na=na)
    ymat[g,]=Y[,1]
    
    
    if (print==TRUE){print(g)}
    
  } # End Gibbs sampling 
  
  
  if(est.error==TRUE){
    return(list("gmat"=gmat,"gmat.te"=gmat.te,"pmat"=pmat,"pmat.te"=pmat.te,
                "varmat"=varmat,"Se.mat"=Se.mat,"Sp.mat"=Sp.mat,"ymat"=ymat))
  }
  if(est.error==FALSE){
    return(list("gmat"=gmat,"gmat.te"=gmat.te,"pmat"=pmat,"pmat.te"=pmat.te,
                "varmat"=varmat,"ymat"=ymat))
  }
  
} # End of function